package modelli;

import java.io.File;

import javafx.scene.control.TextField;

/**
 * Palvelutalo-luokka, joka huolehtii näkymässä tapahtuvien muutosten siirtymisestä työntekijät ja
 * lisäkoulutukset luokkiin.
 *
 * @author Miia Laurila
 * @version 6.6.2017
 */
public class Palvelutalo {
	
    private static Tyontekijat tyontekijat = new Tyontekijat();
    private Lisakoulutukset lisakoulutukset = new Lisakoulutukset(); 
    private static OikeellisuusTarkistus oikeellisuusTarkistus = new OikeellisuusTarkistus();
    
    
    /**
     * Palauttaa työntekijöiden lukumäärän rekisterissä
     * @return työntekijöiden määrän
     */
    public int getTyontekija() {
        return tyontekijat.getLkm();
    }
    
    
    /**
     * Palauttaa lisäkoulutuksien kokonaismäärän rekisterissä.
     * @return lisäkoulutuksien määrän
     */
    public int getLisakoulutus() {
    	return lisakoulutukset.getLkm();
    }
    
    
    /**
     * Lisää uuden työntekijän työntekijä taulukkoon ja sen lisäkoulutukset lisäkoulutus taulukkoon.
     * @param tyontekija lisättävä työntekijä
     * @param uudenLisakoulutukset lisättävät lisäkoulutukset
     * @return työntekijän lisäkoulutukset
     * @throws SailoException virhe
     */
    public Lisakoulutus[] lisaa(Tyontekija tyontekija, Lisakoulutus[] uudenLisakoulutukset) throws SailoException {
    	Lisakoulutus lisakoulutusLista[] = lisakoulutukset.lisaa(uudenLisakoulutukset);
        tyontekijat.lisaa(tyontekija);
        return lisakoulutusLista;
    }


    /**
     * Palauttaa i:nnen työntekijän taulukosta.
     * @param i indeksi
     * @return i:nnen työntekijän
     */
    public Tyontekija annaTyontekija(int i) {
        return tyontekijat.anna(i);
    }
    
    
    /**
     * Palauttaa i:nnen lisäkoulutuksen taulukosta.
     * @param i indeksi
     * @return i:nnen lisäkoulutuksen.
     */
    public Lisakoulutus annaLisakoulutus(int i){
    	return lisakoulutukset.anna(i);
    }


    /**
     * Muokkaus-näkymässä lisättyjen lisäkoulutuksien lisääminen lisäkoulutus taulukkoon
     * @param tyontekijanLisakoulutukset lisäkoulutukset, jotka lisätään lisäkoulutus taulukkoon.
     * @return lisäkoulutukset, jotka on lisätty lisäkoulutus taulukkoon.
     * @throws SailoException virhe tietorakenteessa
     */
	public Lisakoulutus[] lisaa(Lisakoulutus[] tyontekijanLisakoulutukset) throws SailoException {
		Lisakoulutus koulutusLista[] = lisakoulutukset.lisaa(tyontekijanLisakoulutukset);
        return koulutusLista;
	}
	
	
	/**
	 * Asetetaan työntekijälle id.
	 * @param tyontekija työntekijä, jolle id annetaan
	 */
	public void asetaTyontekijalleId(Tyontekija tyontekija){
		tyontekijat.laitaId(tyontekija);
	}
	
	
	/**
	 * Asetaan koulutuksille oma id ja työntekijän id.
	 * @param tyontekija työntekijä, jonka lisäkoulutuksia käsitellään
	 * @param tyontekijanLisakoulutukset työntekijän lisäkoulutukset.
	 */
	public void asetaKoulutuksilleId(Tyontekija tyontekija, Lisakoulutus[] tyontekijanLisakoulutukset){
		lisakoulutukset.laitaId(tyontekija, tyontekijanLisakoulutukset);
	}
	
	
	/**
	 * Asetetaan käytettävät tiedostot
	 * @param tyontekija työntekijöitä käsittelevä tiedosto
	 * @param lisakoulutus lisäkoulutuksia käsittelevä tiedosto
	 */
	public void setTiedosto(String tyontekija, String lisakoulutus){
		File dir = new File(tyontekija);
		File dir1 = new File(lisakoulutus);
        dir.mkdirs();
        dir1.mkdirs();
        tyontekijat.setTiedostonPerusNimi(tyontekija);
        lisakoulutukset.setTiedostonPerusNimi(lisakoulutus);
    }
	
	
    /**
     * Luetaan tiedostoissa olevat työntekijät ja niiden lisäkoulutukset
     * @param tyontekija työntekijöitä käsittelevä tiedosto
     * @param lisakoulutus lisäkoulutuksia käsitteleäv tiedosto
     * @throws SailoException virhe ilmoitus
     */
    public void lueTiedostosta(String tyontekija, String lisakoulutus) throws SailoException {
        tyontekijat = new Tyontekijat();
        lisakoulutukset = new Lisakoulutukset();
        setTiedosto(tyontekija, lisakoulutus);
        tyontekijat.lueTiedostosta();
        lisakoulutukset.lueTiedostosta();
    }

    
	/**
	 * Lisätään tiedostoon työntekijät
	 * @throws SailoException virhe ilmoitus
	 */
	public void lisaaTiedostoon() throws SailoException {
		tyontekijat.lisaaMuokkauksetTiedostoon();
	}

	
	/**
	 * Lisätään tiedostoon lisäkoulutukset.
	 * @throws SailoException virhe ilmoitus
	 */
	public void lisaaLisakoulutus() throws SailoException {
		lisakoulutukset.lisaaTiedostoon();
	}
	

	/**
	 * Poistetaan poistettavan työntekijän tiedot tiedostoista ja taulukoista.
	 * @param poistettava poistettavan työntekijän id.
	 * @throws SailoException virhe ilmoitus
	 */
	public void poista(int poistettava) throws SailoException {
		lisakoulutukset.poistaTiedostosta(poistettava);
		lisakoulutukset.poistaTaulukosta(poistettava);
		tyontekijat.poistaTiedostosta(poistettava);
		tyontekijat.poistaTaulukosta(poistettava);
	}

	
	/**
	 * Palautetaan työntekijä id:n avulla
	 * @param id työntekijän id
	 * @return työntekijä, jolla on haluttu id.
	 */
	public Tyontekija annaTyontekijaIdnAvulla(int id) {
		return tyontekijat.annaTyontekijaId(id);
	}

	
	/**
	 * Muokataan i:nnes lisäkoulutus
	 * @param i indeksi
	 * @param lisakoulutus muokattu lisäkoulutus
	 */
	public void muokkaaLisakoulutus(int i, Lisakoulutus lisakoulutus) {
		lisakoulutukset.muokkaaLisakoulutus(i, lisakoulutus);
	}

	
	/**
	 * Muokataan lisäkoulutus, jolla on tietty id.
	 * @param id lisäkoulutuksen id
	 * @param koulutus lisäkoulutuksen nimi
	 * @param suoritus lisäkoulutuksen suorituspäivämäärä
	 * @param voimassa lisäkoulutuksen voimassaolopäivämäärä
	 */
	public void muokkaaLisakoulutus(int id, String koulutus, String suoritus, String voimassa) {
		lisakoulutukset.muokkaaLisakoulutus(id, koulutus, suoritus, voimassa);
	}

	
	/**
	 * Tarkistetaan kenttien oikeellisuus
	 * @param uudenNimi
	 * @param uudenHetu
	 * @param uudenTyonimike
	 * @param uudenKatuosoite
	 * @param uudenPostinumero
	 * @param uudenPostitoimipaikka
	 * @param uudenPuhelinnumero
	 * @param id
	 * @return
	 */
	public Boolean tarkistaKentat(TextField uudenNimi, TextField uudenHetu, TextField uudenTyonimike, TextField uudenKatuosoite, TextField uudenPostinumero, TextField uudenPostitoimipaikka, TextField uudenPuhelinnumero, int id) {
		return oikeellisuusTarkistus.tarkistus(uudenNimi, uudenHetu, uudenTyonimike, uudenKatuosoite, uudenPostinumero, uudenPostitoimipaikka, uudenPuhelinnumero, id);
	}
}